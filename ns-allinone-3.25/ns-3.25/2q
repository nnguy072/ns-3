//Based off the code from ns3/examples/wifi/power-adaptation-distance.cc

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/wifi-module.h"
#include "ns3/applications-module.h"
#include "ns3/mobility-module.h"
#include "ns3/applications-module.h"
#include "ns3/flow-monitor-module.h"
#include "ns3/stats-module.h"

using namespace ns3;
using namespace std;

NS_LOG_COMPONENT_DEFINE ("POWER");

// GLOBAL VARIABLES TO CALCULATE
// THROUGHPUT AND ATP
uint32_t packetSize = 1024; 			// max packet size
double totalEnergy = 0;				// dbm/S
double m_bits_total = 0;			// Mbps
std::map<Mac48Address, double> recordedPower;	// Power at certain Mac48Address 
std::map<Mac48Address, WifiMode> recordedMode;	// Mode at certain Address
TxTime timeTable;				// TxTime for certain WifiModes
Ptr<WifiPhy> myPhy;				// WifiPhy

// this function sets up the timeTable variable
// it gets called before the schedule
// so we know what the Tx duration is for what mode
// It is used to calculate totalEnergy and ATP
void
makeTimeTable(NetDeviceContainer aps){
  Ptr<NetDevice> device = aps.Get(0);
  Ptr<WifiNetDevice> wifiDevice = DynamicCast<WifiNetDevice>(device);
  Ptr<WifiPhy> phy = wifiDevice->GetPhy();
  myPhy = phy;
  uint32_t nModes = phy->GetNModes();
  for(uint32_t i = 0; i < nModes; i++){
    WifiMode mode = phy->GetMode(i);
    WifiTxVector txVector;
    txVector.SetMode(mode);
    timeTable.push_back(std::make_pair(phy->CalculateTxDuration(packetSize, txVector, WIFI_PREAMBLE_LONG, phy->GetFrequency()),mode));
  }
}

// <key, value> = <mode, txDuration>
// returns Tx duration given a WifiMode
// used to calculate totalEnergy
Time 
getTxTime(WifiMode mode){
  for(TxTime::const_iterator i = timeTable.begin(); i != timeTable.end(); i++){
    if(mode == i->second)
      return i->first;
  }
  return Seconds(0);
}

// totalEnergy = 10^(transmitsPower/10) * TxDuration
void getTotalEnergy(std::string path, Ptr<const Packet> packet){
  WifiMacHeader head;
  packet->PeekHeader(head);
  Mac48Address dest = head.GetAddr1();
  if(head.GetType() == WIFI_MAC_DATA){
    totalEnergy += pow(10.0, recordedPower[dest] / 10.0) * getTxTime(recordedMode[dest]).GetSeconds();
  }
}

// trace sink to get transmission power
void getPower(std::string path, uint8_t power, Mac48Address dest){
  NS_LOG_UNCOND("HERE");
  // power (in dBm)
  //obtainedPower = (pow(10.0, power / 10.0));
  double txPowerBaseDbm = myPhy->GetTxPowerStart();
  double txPowerEndDbm = myPhy->GetTxPowerEnd();
  uint32_t nTxPower = myPhy->GetNTxPower();
  double dbm;
  if(nTxPower >1)
    dbm = txPowerBaseDbm + power * (txPowerEndDbm - txPowerBaseDbm) / (nTxPower - 1);
  else
    dbm = txPowerBaseDbm;
  recordedPower[dest] = dbm;
}

// trace source to get packet size
void
getPackageSize(std::string context, Ptr<const Packet> packet, const Address &from){
  // packet->GetSize() returns in bytes
  // we want MegaBits
  // Megabits = (Bytes * 8)/10^6
  m_bits_total += ((packet->GetSize() * 8)/double(1000000));
}

// trace source to get transmission rate
void
getRate(std::string context, uint32_t rate, Mac48Address dest){
  recordedMode[dest] = myPhy->GetMode(rate);
}

void moveXPosition(Ptr<Node> node, int stepsSize, int stepsTime){
  // get position of the node
  Ptr<MobilityModel> mobility = node->GetObject<MobilityModel>();
  Vector position = mobility->GetPosition();
  
  // calculate throughput (in Mbps)
  // ms -> s : 100 ms -> .1 ms
  // m_bits_total: Mbps
  double throughput = ((m_bits_total * 1000) /((double)stepsTime));
  
  // calculate Average Transmit Power (ATP)
  // stepsTime: ms -> S
  // totalEnergy: dbm
  double atp = (totalEnergy*1000) / (double)stepsTime;

  // record stuff
  NS_LOG_UNCOND("Position: " << position.x << ", Throughput:" << throughput << ", ATP: " << atp);
  //NS_LOG_UNCOND(position.x << " " << atp);
  //NS_LOG_UNCOND(position.x << " " << throughput);
  //NS_LOG_UNCOND(atp << " " << throughput);
  m_bits_total  = 0;
  totalEnergy = 0;
  if(position.x == 6)
    exit(1);
  // move node 
  position.x += stepsSize;
  mobility->SetPosition(position);

  //NS_LOG_UNCOND("At time " << Simulator::Now().GetSeconds() << " sec; setting new position to " << "(" << position.x << "," << position.y << ")" );
  Simulator::Schedule(MilliSeconds(stepsTime), &moveXPosition, node, stepsSize, stepsTime);
}

int main(int argc, char *argv[])
{
  double maxPower = 30;
  double minPower = 0;
  uint32_t powerLevels = 31;

  uint32_t rtsThreshold = 2436;		// not sure how to disable this
  uint32_t steps = 100;			// number of times node moves
  uint32_t powerStepsSize = 1;		// power increase by this number
  uint32_t stepsSize = 1;		// node moves 1 unit
  uint32_t stepsTime = 100;		// time between steps

  // AP and STA starting coordinates
  int ap_x = 0;
  int ap_y = 0;
  int sta_x = 5;
  int sta_y = 0;
  
  CommandLine cmd;
  cmd.AddValue("rtsThreshold", "RTS threshhold", rtsThreshold);
  cmd.AddValue("steps", "How many different distances to try?", steps);
  cmd.AddValue("stepsTime", "Time on each step", stepsTime);
  cmd.AddValue("stepsSize", "Distance between steps", stepsSize);
  cmd.AddValue("powerStepsSize", "Power increase by this number", powerStepsSize);
  cmd.AddValue("maxPower", "Maximum available transmission level (dbm).", maxPower);
  cmd.AddValue("minPower", "Minimum available transmission level (dbm).", minPower);

  cmd.Parse(argc, argv);
  uint32_t simuTime = (steps + 1) * stepsTime;
  
  // define AP
  NodeContainer wifiApNodes;
  wifiApNodes.Create(1);
  
  // Define mobile Stations
  NodeContainer wifiStaNodes;
  wifiStaNodes.Create(1);

  WifiHelper wifi;
  //wifi.SetStandard(WIFI_PHY_STANDARD_80211a);
  WifiMacHelper wifiMac;
  YansWifiPhyHelper wifiPhy = YansWifiPhyHelper::Default();
  YansWifiChannelHelper wifiChannel = YansWifiChannelHelper::Default();

  wifiPhy.SetChannel(wifiChannel.Create ());

  NetDeviceContainer wifiApDevices;
  NetDeviceContainer wifiStaDevices;
  NetDeviceContainer wifiDevices;

  //Configure the mobile stations
  wifi.SetRemoteStationManager("ns3::MinstrelWifiManager", "RtsCtsThreshold", UintegerValue(rtsThreshold));
  wifiPhy.Set ("TxPowerStart", DoubleValue (maxPower));
  wifiPhy.Set ("TxPowerEnd", DoubleValue(maxPower));
  
  Ssid ssid = Ssid ("AP");
  wifiMac.SetType ("ns3::StaWifiMac",
                   "Ssid", SsidValue(ssid),
                   "ActiveProbing", BooleanValue(false));
  wifiStaDevices.Add (wifi.Install(wifiPhy, wifiMac, wifiStaNodes.Get(0)));

  // configure AP
  wifi.SetRemoteStationManager ("ns3::mParfWifiManager", "DefaultTxPowerLevel", UintegerValue(maxPower), "RtsCtsThreshold", UintegerValue(rtsThreshold), "pStepSize", UintegerValue(powerStepsSize));
  wifiPhy.Set ("TxPowerStart", DoubleValue (minPower));
  wifiPhy.Set ("TxPowerEnd", DoubleValue(maxPower));
  wifiPhy.Set ("TxPowerLevels", UintegerValue(powerLevels));
  
  ssid = Ssid ("AP");
  wifiMac.SetType ("ns3::ApWifiMac",
                   "Ssid", SsidValue(ssid));
  wifiApDevices.Add(wifi.Install(wifiPhy, wifiMac, wifiApNodes.Get(0)));

  wifiDevices.Add(wifiStaDevices);
  wifiDevices.Add(wifiApDevices);

  //configure mobility
  MobilityHelper mobility;  
  Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
  
  // initial position for AP and STA
  positionAlloc->Add (Vector(ap_x, ap_y, 0.0));
  NS_LOG_UNCOND ("Setting initial AP Position to " << Vector(ap_x, ap_y, 0.0));
  positionAlloc->Add (Vector(sta_x, sta_y, 0.0));
  NS_LOG_UNCOND ("Setting initial STA position to " << Vector(sta_x, sta_y, 0.0));
  
  mobility.SetPositionAllocator(positionAlloc);
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install(wifiApNodes.Get(0));
  mobility.Install(wifiStaNodes.Get(0));

  NS_LOG_UNCOND("HERE2");
  // helper to get time
  makeTimeTable(wifiApDevices); 
  // move the mobile station by stepsSize every stepsTime seconds
  // I think the function call is:
  // Schedule(Timeout, &Handler, handler_param1, handler_parma2, ...)
  Simulator::Schedule(MilliSeconds(1000 + stepsTime), &moveXPosition, wifiStaNodes.Get(0), stepsSize, stepsTime);
  
  // Configure the IP stack
  InternetStackHelper stack;
  stack.Install(wifiApNodes);
  stack.Install(wifiStaNodes);
  
  Ipv4AddressHelper address;
  address.SetBase("10.1.1.0", "255.255.255.0");

  Ipv4InterfaceContainer i = address.Assign(wifiDevices);
  Ipv4Address sinkAddress = i.GetAddress(0);
  uint16_t port = 9;

  PacketSinkHelper sink("ns3::UdpSocketFactory", InetSocketAddress(sinkAddress,port));
  ApplicationContainer apps_sink = sink.Install(wifiStaNodes.Get(0));

  OnOffHelper onoff("ns3::UdpSocketFactory", InetSocketAddress(sinkAddress, port));
  onoff.SetConstantRate(DataRate("54Mb/s"), packetSize);
  onoff.SetAttribute("StartTime", TimeValue(MilliSeconds(0.5)));
  onoff.SetAttribute("StopTime", TimeValue(MilliSeconds(simuTime)));
  ApplicationContainer apps_source = onoff.Install(wifiApNodes.Get(0));

  apps_sink.Start(MilliSeconds(0.5));
  apps_sink.Stop(MilliSeconds(simuTime));

  // collect data
  Config::Connect("/NodeList/1/ApplicationList/*/$ns3::PacketSink/Rx", MakeCallback(&getPackageSize));
  Config::Connect("/NodeList/0/DeviceList/*/$ns3::WifiNetDevice/RemoteStationManager/$ns3::mParfWifiManager/PowerChange", MakeCallback(getPower)); 
  Config::Connect("/NodeList/0/DeviceList/*/$ns3::WifiNetDevice/RemoteStationManager/$ns3::mParfWifiManager/RateChange", MakeCallback(&getRate));

  Config::Connect("/NodeList/0/DeviceList/*/$ns3::WifiNetDevice/Phy/PhyTxBegin", MakeCallback(&getTotalEnergy));

  Simulator::Stop (MilliSeconds(simuTime));
  Simulator::Run();

  Simulator::Destroy();

  return 0;
}
